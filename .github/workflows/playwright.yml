name: Github Actions Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-node@v4
      with:
        node-version: lts/*

    # Install MongoDB tools for interacting with the database
    - name: Install mongosh
      run: |
        sudo apt-get update
        sudo apt-get install -y wget gnupg
        wget -qO - https://www.mongodb.org/static/pgp/server-6.0.asc | sudo apt-key add -
        echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/6.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list
        sudo apt-get update
        sudo apt-get install -y mongodb-mongosh mongodb-org-tools

    # MongoDB setup
    - name: MongoDB Setup
      uses: supercharge/mongodb-github-action@v1
      with:
        mongodb-version: latest

    - name: Load posts into MongoDB
      run: mongoimport --uri mongodb://localhost:27017/country-code --collection codes --file ./mongo/country-code.codes.json --jsonArray
    - name: Load users into MongoDB
      run: mongoimport --uri mongodb://localhost:27017/country-code --collection streamingservices --file ./mongo/country-code.streamingservices.json --jsonArray

    # Clone the backend repository
    - name: Checkout Backend Repository
      uses: actions/checkout@v4
      with:
        repository: SSG27/EXPRESS-API
        path: backend

    # Install backend dependencies
    - name: Install Backend Dependencies
      run: npm ci --legacy-peer-deps
      working-directory: ./backend

    # Run backend linting
    - name: Run Backend Lint
      run: npm run lint
      working-directory: ./backend

    # Run backend Jest unit tests with coverage
    - name: Run Backend Jest Tests
      run: npx jest --coverage
      working-directory: ./backend

    # Build and push backend Docker image
    - name: Build and Push Backend Docker Image
      run: |
        docker build -t sss-backend:latest ./backend
        echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
        docker tag sss-backend:latest ${{ secrets.DOCKER_USERNAME }}/sss-backend:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/sss-backend:latest

    # Install frontend dependencies
    - name: Install Frontend Dependencies
      run: npm ci

    # Run frontend linting
    - name: Run Frontend Lint
      run: npm run lint

    # Build and push frontend Docker image
    - name: Build and Push Frontend Docker Image
      run: |
        docker build -t sss-frontend:latest .
        echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
        docker tag sss-frontend:latest ${{ secrets.DOCKER_USERNAME }}/sss-frontend:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/sss-frontend:latest

    # Start the backend container
    - name: Start Backend Container
      run: docker run -d -p 8000:8000 --name sss-backend ${{ secrets.DOCKER_USERNAME }}/sss-backend:latest

    # Wait for the backend to be ready
    - name: Wait for Backend to be Ready
      run: sleep 20

    # Start the frontend container
    - name: Start Frontend Container
      run: docker run -d -p 3000:3000 --name sss-frontend ${{ secrets.DOCKER_USERNAME }}/sss-frontend:latest

    # Wait for the frontend to be ready
    - name: Wait for Frontend to be Ready
      run: sleep 20

    # Install Playwright browsers
    - name: Install Playwright Browsers
      run: npx playwright install --with-deps

    # Debugging
    - name: Debugging
      run: sudo lsof -i -P -n | grep LISTEN

    # Run Playwright tests
    - name: Run Playwright tests
      run: npx playwright test

    # Upload Playwright report
    - uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30
